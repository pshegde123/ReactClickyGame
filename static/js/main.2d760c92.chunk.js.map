{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/FriendCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Navbar","href","message","score","topScore","FriendCard","onClick","clickCount","id","alt","name","src","image","App","state","maxScore","friends","friendClicked","filter","card","clicked","handleIncorrectClick","handleCorrectClick","randomizeCharacters","setState","characters","sort","a","b","Math","random","resetGame","i","length","this","map","friend","key","occupation","location","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sxEAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCc1BC,MAff,SAAgBH,GACd,OAEM,yBAAKC,UAAU,UACX,4BACI,4BACI,uBAAGA,UAAU,QAAQG,KAAK,KAA1B,gBAEJ,4BAAKJ,EAAMK,SACX,sCAAYL,EAAMM,MAAlB,gBAAsCN,EAAMO,aCC7CC,G,MAVI,SAAAR,GAAK,OAEpB,yBAAKC,UAAU,6BAA6BQ,QAAS,kBAAIT,EAAMU,WAAWV,EAAMW,MAC9E,yBAAKV,UAAU,iBACb,yBAAKW,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,Y,OCsF1BC,E,2MArFbC,MAAQ,CACNX,MAAM,EACNC,SAAS,EACTW,SAAS,GACTb,QAAQ,4BACRc,W,EAGFT,WAAa,SAAAC,GACX,IACMS,EADa,EAAKH,MAAME,QACGE,QAAO,SAAAC,GAAI,OAAEA,EAAKX,KAAOA,KACtDS,EAAc,GAAGG,QAOnB,EAAKC,wBANLJ,EAAc,GAAGG,SAAU,EACzB,EAAKE,qBACL,EAAKC,oBAAoBP,GACzB,EAAKQ,SAAS,CAACR,c,EAQtBM,mBAAqB,WAChB,EAAKR,MAAMX,MAAQ,EAAI,EAAKW,MAAMV,UACpC,EAAKoB,SAAS,CAAEpB,SAAU,EAAKU,MAAMV,SAAW,IAE9C,EAAKU,MAAMX,MAAQ,GAAK,EAAKW,MAAMC,SACrC,EAAKS,SAAS,CACZrB,MAAO,EAAKW,MAAMX,MAAQ,EAC1BD,QAAQ,uBAGV,EAAKsB,SAAS,CACZrB,MAAO,EAAKW,MAAMX,MAAQ,EAC1BD,QAAQ,4B,EAMdqB,oBAAsB,SAAAE,GACpBA,EAAWC,MAAK,SAACC,EAAGC,GAClB,MAAO,GAAMC,KAAKC,a,EAKtBT,qBAAuB,WACrB,EAAKG,SAAS,CACZtB,QAAS,2BAGX,EAAK6B,a,EAIPA,UAAY,SAAAvB,GAEV,IADA,IAAMQ,EAAU,EAAKF,MAAME,QAClBgB,EAAI,EAAGA,EAAIhB,EAAQiB,OAAQD,IAClChB,EAAQgB,GAAGZ,SAAU,EAEvB,EAAKI,SAAS,CAAErB,MAAO,K,wEAGd,IAAD,OACN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAQA,MAAO+B,KAAKpB,MAAMX,MAAOC,SAAU8B,KAAKpB,MAAMV,SAAUF,QAASgC,KAAKpB,MAAMZ,UACnFgC,KAAKpB,MAAME,QAAQmB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACE7B,WAAc,EAAKA,WACnBC,GAAI4B,EAAO5B,GACX6B,IAAKD,EAAO5B,GACZE,KAAM0B,EAAO1B,KACbE,MAAOwB,EAAOxB,MACd0B,WAAYF,EAAOE,WACnBC,SAAUH,EAAOG,mB,GA/EXC,IAAMC,WCMJC,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2d760c92.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    \r\n        <nav className=\"navbar\">\r\n            <ul>\r\n                <li>\r\n                    <a className=\"title\" href=\"/\">Clicky Game</a>\r\n                </li>\r\n                <li>{props.message}</li>\r\n                <li>Score: {props.score} | TopScore: {props.topScore}</li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst FriendCard = props=> (\r\n  \r\n    <div className=\"card col-md-3 bg-secondary\" onClick={()=>props.clickCount(props.id)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n    </div>\r\n  \r\n)\r\n\r\nexport default FriendCard;\r\n","import React from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from './components/Navbar';\nimport FriendCard from './components/FriendCard';\nimport friends from './friends.json';\n\nclass App extends React.Component{\n  // Setting this.state.friends to the friends json array\n  state = {\n    score:0,\n    topScore:0,\n    maxScore:12,\n    message:\"CLICK AND IMAGE TO BEGIN!\" ,\n    friends\n  };\n\n  clickCount = id =>{\n    const friendList = this.state.friends;\n    const friendClicked = friendList.filter(card=>card.id === id);\n    if(!friendClicked[0].clicked){\n      friendClicked[0].clicked = true;\n        this.handleCorrectClick();\n        this.randomizeCharacters(friends);\n        this.setState({friends});\n    }\n    else{\n      this.handleIncorrectClick();\n    }\n  };\n\n // Handler for correct guesses/clicks\n handleCorrectClick = () => {\n  if (this.state.score + 1 > this.state.topScore) {\n    this.setState({ topScore: this.state.topScore + 1 });\n  }\n  if (this.state.score + 1 >= this.state.maxScore) {\n    this.setState({\n      score: this.state.score + 1,\n      message:\"CONGRATS! YOU WIN!\",\n    });\n  } else {\n    this.setState({\n      score: this.state.score + 1,\n      message:\"YOU GUESSED CORRECTLY!\",\n    });\n  }\n};\n\n// Function to randomize the characters\nrandomizeCharacters = characters => {\n  characters.sort((a, b) => {\n    return 0.5 - Math.random();\n  });\n};\n\n  // Handler for incorrect guesses/clicks\nhandleIncorrectClick = () => {\n  this.setState({\n    message: \"INCORRECT. PLAY AGAIN?\",\n  });\n  // this.toggleIncorrectAnimation();\n  this.resetGame();\n};\n\n// Resets the game\nresetGame = id => {\n  const friends = this.state.friends;\n  for (let i = 0; i < friends.length; i++) {\n    friends[i].clicked = false;\n  }\n  this.setState({ score: 0 });\n};\n\n  render(){\n    return(\n      <Wrapper>\n        <Navbar score={this.state.score} topScore={this.state.topScore} message={this.state.message}/>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            clickCount = {this.clickCount}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}